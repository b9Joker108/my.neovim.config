-- lua/config/keymaps.lua

-- Print statement for debugging purposes
print("Loading keymaps.lua")

-- Define the path for the error log file
local error_log_path = "/home/hummingbird108/.config/b9Joker108/my.neovim.config/keymaps_error.log"

-- Function to log errors to the specified log file
local function log_error(err)
  local file = io.open(error_log_path, "a") -- Open in append mode
  if file then
    file:write(os.date("%Y-%m-%d %H:%M:%S") .. " - " .. err .. "\n")
    file:close()
  else
    vim.notify("Failed to open keymaps error log file.", vim.log.levels.ERROR)
  end
end

-- Protected call to encapsulate keymap setup and catch any runtime errors
local status, err = pcall(function()
  -- Local shortcuts for convenience
  local map = vim.keymap.set
  local o = vim.opt

  -- Safely require the 'lazy' module (plugin manager)
  local lazy = nil
  local status_ok, lazy_mod = pcall(require, "lazy")
  if status_ok then
    lazy = lazy_mod
  else
    vim.notify("Failed to load lazy.nvim", vim.log.levels.ERROR)
  end

  -- Safely reference the global LazyVim module
  local LazyVim = _G.LazyVim or nil
  if not LazyVim then
    vim.notify("LazyVim is not available yet.", vim.log.levels.WARN)
  end

  -- =====================
  -- === Keymap Definitions ===
  -- =====================

  -- Search current word on Brave Search
  local searching_brave = function()
    vim.fn.system({ "xdg-open", "https://search.brave.com/search?q=" .. vim.fn.expand("<cword>") })
  end
  map("n", "<leader>?", searching_brave, { noremap = true, silent = true, desc = "Search Current Word on Brave Search" })

  -- LazyVim Options
  map("n", "<leader>l", "<Nop>")
  map("n", "<leader>ll", "<cmd>Lazy<cr>", { desc = "Lazy" })

  -- stylua: ignore start
  map("n", "<leader>ld", function()
    vim.fn.system({ "xdg-open", "https://lazyvim.org" })
  end, { desc = "LazyVim Docs" })

  map("n", "<leader>lr", function()
    vim.fn.system({ "xdg-open", "https://github.com/LazyVim/LazyVim" })
  end, { desc = "LazyVim Repo" })

  map("n", "<leader>lx", "<cmd>LazyExtras<cr>", { desc = "Extras" })

  map("n", "<leader>lc", function()
    if LazyVim and LazyVim.news and LazyVim.news.changelog then
      LazyVim.news.changelog()
    else
      vim.notify("LazyVim's 'news.changelog' function is unavailable.", vim.log.levels.WARN)
    end
  end, { desc = "LazyVim Changelog" })

  map("n", "<leader>lu", function()
    if lazy and lazy.update then
      lazy.update()
    else
      vim.notify("lazy.update function is unavailable.", vim.log.levels.WARN)
    end
  end, { desc = "Lazy Update" })

  map("n", "<leader>lC", function()
    if lazy and lazy.check then
      lazy.check()
    else
      vim.notify("lazy.check function is unavailable.", vim.log.levels.WARN)
    end
  end, { desc = "Lazy Check" })

  map("n", "<leader>ls", function()
    if lazy and lazy.sync then
      lazy.sync()
    else
      vim.notify("lazy.sync function is unavailable.", vim.log.levels.WARN)
    end
  end, { desc = "Lazy Sync" })
  -- stylua: ignore end

  -- Disable LazyVim default bindings that you might want to override or not use
  map("n", "<leader>L", "<Nop>")
  map("n", "<leader>fT", "<Nop>")

  -- Indentation shortcuts
  map("n", "<", "<<", { desc = "Deindent" })
  map("n", ">", ">>", { desc = "Indent" })

  -- Save file without triggering autocmds (e.g., formatting)
  map("n", "<A-s>", "<cmd>noautocmd w<CR>", { desc = "Save Without Formatting" })

  -- Cursor movement in insert mode with Meta keys
  map("i", "<M-h>", "<left>", { desc = "Move Cursor Left" })
  map("i", "<M-l>", "<right>", { desc = "Move Cursor Right" })
  map("i", "<M-j>", "<down>", { desc = "Move Cursor Down" })
  map("i", "<M-k>", "<up>", { desc = "Move Cursor Up" })

  -- Navigate to the end of the word backward
  map("n", "E", "ge")

  -- Increment and decrement numbers
  map("n", "+", "<C-a>")
  map("n", "-", "<C-x>")

  -- Tab navigation and management
  map("n", "]<tab>", "<cmd>tabnext<cr>", { desc = "Next Tab" })
  map("n", "[<tab>", "<cmd>tabprevious<cr>", { desc = "Previous Tab" })
  map("n", "<tab>", "<cmd>tabnext<cr>", { desc = "Next Tab" })
  map("n", "<s-tab>", "<cmd>tabprevious<cr>", { desc = "Previous Tab" })

  -- Quickly jump to specific tabs
  for i = 1, 9 do
    map("n", "<leader><tab>" .. i, "<cmd>tabn " .. i .. "<cr>", { desc = "Jump to Tab " .. i })
  end

  -- Select and jump to a chosen tab via UI
  map("n", "<leader>f<tab>", function()
    vim.ui.select(vim.api.nvim_list_tabpages(), {
      prompt = "Select Tab:",
      format_item = function(tabid)
        local wins = vim.api.nvim_tabpage_list_wins(tabid)
        local not_floating_win = function(winid)
          return vim.api.nvim_win_get_config(winid).relative == ""
        end
        wins = vim.tbl_filter(not_floating_win, wins)
        local bufs = {}
        for _, win in ipairs(wins) do
          local buf = vim.api.nvim_win_get_buf(win)
          local buftype = vim.api.nvim_get_option_value("buftype", { buf = buf })
          if buftype ~= "nofile" then
            local fname = vim.api.nvim_buf_get_name(buf)
            table.insert(bufs, vim.fn.fnamemodify(fname, ":t"))
          end
        end
        local tabnr = vim.api.nvim_tabpage_get_number(tabid)
        local cwd = string.format(" %8s: ", vim.fn.fnamemodify(vim.fn.getcwd(-1, tabnr), ":t"))
        local is_current = vim.api.nvim_tabpage_get_number(0) == tabnr and "✸" or " "
        return tabnr .. is_current .. cwd .. table.concat(bufs, ", ")
      end,
    }, function(tabid)
      if tabid ~= nil then
        vim.cmd(tabid .. "tabnext")
      end
    end)
  end, { desc = "Select and Jump to Tab" })

  -- Buffer navigation
  map("n", "<leader>bf", "<cmd>bfirst<cr>", { desc = "First Buffer" })
  map("n", "<leader>ba", "<cmd>blast<cr>", { desc = "Last Buffer" })
  map("n", "<leader>b<tab>", "<cmd>tabnew %<cr>", { desc = "Open Current Buffer in New Tab" })

  -- Toggle statusline visibility
  map("n", "<leader>uS", function()
    if o.laststatus:get() == 0 then
      o.laststatus = 3
    else
      o.laststatus = 0
    end
  end, { desc = "Toggle Statusline" })

  -- Toggle tabline visibility
  map("n", "<leader>u<tab>", function()
    if o.showtabline:get() == 0 then
      o.showtabline = 2
    else
      o.showtabline = 0
    end
  end, { desc = "Toggle Tabline" })

  -- Comment block navigation
  map("n", "]/", "/\\S\\zs\\s*╭<CR>zt", { desc = "Next Block Comment" })
  map("n", "[/", "?\\S\\zs\\s*╭<CR>zt", { desc = "Previous Block Comment" })

  -- Plugin information mappings
  map("n", "<leader>cif", "<cmd>LazyFormatInfo<cr>", { desc = "Formatting Info" })
  map("n", "<leader>cic", "<cmd>ConformInfo<cr>", { desc = "Conform Info" })

  -- Linter information and interaction
  local linters = function()
    local status_ok, lint = pcall(require, "lint")
    if not status_ok then
      vim.notify("Failed to require 'lint' module.", vim.log.levels.ERROR)
      return
    end

    local linters_attached = lint.linters_by_ft[vim.bo.filetype]
    local buf_linters = {}

    if not linters_attached then
      if LazyVim and LazyVim.warn then
        LazyVim.warn("No linters attached", { title = "Linter" })
      else
        vim.notify("No linters attached", vim.log.levels.WARN)
      end
      return
    end

    for _, linter in pairs(linters_attached) do
      table.insert(buf_linters, linter)
    end

    local unique_client_names = table.concat(buf_linters, ", ")
    local linters_str = string.format("Linters: %s", unique_client_names)

    if LazyVim and LazyVim.notify then
      LazyVim.notify(linters_str, { title = "Linter" })
    else
      vim.notify(linters_str, { title = "Linter" })
    end
  end

  map("n", "<leader>ciL", linters, { desc = "Lint Information" })
  map("n", "<leader>cir", "<cmd>LazyRoot<cr>", { desc = "Set LazyVim Root" })

  -- Redo command
  map("n", "U", "<C-r>", { desc = "Redo" })

  -- Copy entire buffer to clipboard
  map("n", "<C-c>", ":%y+<CR>", { desc = "Copy Entire Buffer to Clipboard", silent = true })

  -- Line motion in command-line and insert modes
  map("c", "<C-a>", "<C-b>", { desc = "Navigate to Start of Line" })
  map("i", "<C-a>", "<Home>", { desc = "Navigate to Start of Line (Insert Mode)" })
  map("i", "<C-e>", "<End>", { desc = "Navigate to End of Line (Insert Mode)" })

  -- Select all text in buffer
  map("n", "<C-e>", "gg<S-V>G", { desc = "Select All Text", silent = true, noremap = true })

  -- Enhanced paste options
  map("i", "<C-v>", '<C-r>"', { desc = "Paste from Clipboard (Insert Mode)" })
  map("v", "p", '"_dP', { desc = "Paste Without Overwriting Register" })

  -- Delete and change without yanking
  map({ "n", "x" }, "<A-d>", '"_d', { desc = "Delete Without Yanking" })
  map({ "n", "x" }, "<A-c>", '"_c', { desc = "Change Without Yanking" })

  -- Delete empty lines without yanking
  map("n", "dd", function()
    local is_empty_line = vim.api.nvim_get_current_line():match("^%s*$")
    if is_empty_line then
      return '"_dd'
    else
      return "dd"
    end
  end, { noremap = true, expr = true, desc = "Delete Line Without Yanking If Empty" })

  -- Search within visually highlighted text
  map("x", "g/", "<esc>/\\%V", { silent = false, desc = "Search Inside Visual Selection" })

  -- Improved search for visually selected text
  map("x", "*", [[y/\V<C-R>=escape(@", '/\')<CR><CR>]], { desc = "Search Selected Text Forward", silent = true })
  map("x", "#", [[y?\V<C-R>=escape(@", '?\')<CR><CR>]], { desc = "Search Selected Text Backward", silent = true })

  -- Dashboard setup
  map("n", "<leader>fd", function()
    if LazyVim and LazyVim.has then
      if LazyVim.has("alpha-nvim") then
        require("alpha").start(true)
      elseif LazyVim.has("dashboard-nvim") then
        vim.cmd("Dashboard")
      else
        vim.notify("No supported dashboard plugin found.", vim.log.levels.WARN)
      end
    else
      vim.notify("LazyVim module or 'has' function is unavailable.", vim.log.levels.WARN)
    end
  end, { desc = "Open Dashboard" })

  -- Spelling corrections
  map("n", "<leader>!", "zg", { desc = "Add Word to Dictionary" })
  map("n", "<leader>@", "zug", { desc = "Remove Word from Dictionary" })

  -- Terminal integrations
  if LazyVim and LazyVim.has then
    if not (LazyVim.has("floaterm.nvim") and LazyVim.has("toggleterm.nvim")) then
      local lazyterm = function()
        if LazyVim.terminal and LazyVim.root then
          LazyVim.terminal(nil, { size = { width = 0.8, height = 0.8 }, cwd = LazyVim.root() })
        else
          vim.notify("LazyVim's terminal functions are unavailable.", vim.log.levels.WARN)
        end
      end

      map("n", "<leader>ft", lazyterm, { desc = "Open Terminal (Root Dir)" })

      map("n", "<leader>fT", function()
        if LazyVim.terminal and LazyVim.root then
          LazyVim.terminal(nil, { size = { width = 0.8, height = 0.8 }, cwd = vim.fn.getcwd() })
        else
          vim.notify("LazyVim's terminal functions are unavailable.", vim.log.levels.WARN)
        end
      end, { desc = "Open Terminal (Current Directory)" })

      map("n", [[<c-\>]], lazyterm, { desc = "Open Terminal (Root Dir)" })
      map("t", [[<c-\>]], "<cmd>close<cr>", { desc = "Hide Terminal" })
    end
  else
    vim.notify("LazyVim module or 'has' function is unavailable.", vim.log.levels.WARN)
  end

  -- Marks management
  map("n", "dm", function()
    local cur_line = vim.fn.line(".")
    -- Delete buffer-local marks on current line
    for _, mark in ipairs(vim.fn.getmarklist("%")) do
      if mark.pos[2] == cur_line and mark.mark:match("[a-zA-Z]") then
        vim.api.nvim_buf_del_mark(0, string.sub(mark.mark, 2, #mark.mark))
        return
      end
    end
    -- Delete global marks on current line
    local cur_buf = vim.api.nvim_win_get_buf(vim.api.nvim_get_current_win())
    for _, mark in ipairs(vim.fn.getmarklist()) do
      if mark.pos[1] == cur_buf and mark.pos[2] == cur_line and mark.mark:match("[a-zA-Z]") then
        vim.api.nvim_buf_del_mark(0, string.sub(mark.mark, 2, #mark.mark))
        return
      end
    end
  end, { noremap = true, desc = "Delete Mark on Current Line" })

  -- Insert empty lines above and below
  map("n", "gO", "<Cmd>call append(line('.') - 1, repeat([''], v:count1))<CR>", { desc = "Empty Line Above" })
  map("n", "go", "<Cmd>call append(line('.'), repeat([''], v:count1))<CR>", { desc = "Empty Line Below" })

  -- Insert Mode shortcuts
  map({ "c", "i", "t" }, "<M-BS>", "<C-w>", { desc = "Delete Previous Word" })

  -- Git blame integration
  if LazyVim and LazyVim.lazygit and LazyVim.lazygit.blame_line then
    map("n", "<leader>ghb", LazyVim.lazygit.blame_line, { desc = "Blame Current Line with LazyGit" })
  else
    vim.notify("LazyVim's 'lazygit.blame_line' function is unavailable.", vim.log.levels.WARN)
  end

  -- Window splitting shortcuts
  map("n", "<leader>_", "<C-W>s", { desc = "Split Window Below", remap = true })
  map("n", "<leader>\\", "<C-W>v", { desc = "Split Window Right", remap = true })

end)

-- Handle any errors captured during the pcall
if not status then
  -- Log the error to the error log file
  log_error(err)

  -- Notify the user within Neovim about the error
  vim.notify("Error in keymaps.lua: " .. err, vim.log.levels.ERROR)
end
